% Florian Sihler, 2022
% Licensed under MIT License
% https://opensource.org/licenses/MIT
\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{lc-visualizer}[2022/07/24 Florian Sihler - Highlighting lambda calculus expressions]

\newif\iflc@load@default@rewrites \lc@load@default@rewritestrue
\DeclareOption{default-rewrites}{\lc@load@default@rewritestrue}
\DeclareOption{no-default-rewrites}{\lc@load@default@rewritesfalse}
\ProcessOptions*

\RequirePackage{tikz}
\usetikzlibrary{tikzmark}
\RequirePackage{xspace} % :3
\RequirePackage{etoolbox}
% TODO: make packages optional?
\RequirePackage{amsmath}
% TODO: replace xargs by manual construction!
\RequirePackage{xargs}

% TODO: update so wie can limit nesting depths of drawings too (similar to lcMaximumParenthesisRangeDrawDepth)
\newif\iflcdrawlambdaranges
\let\lcEnableLambdaRanges\lcdrawlambdarangestrue
\let\lcDisableLambdaRanges\lcdrawlambdarangesfalse
\lcEnableLambdaRanges

\newif\iflcshadeSameVaiables
\let\lcDoShadeSameVariables\lcshadeSameVaiablestrue
\let\lcDoNotShadeSameVariables\lcshadeSameVaiablesfalse
\lcDoShadeSameVariables

\newif\iflcSingleLambdasForMultiple
\let\lcDoSingleLambdasForMultiple\lcSingleLambdasForMultipletrue
\let\lcDoNotSingleLambdasForMultiple\lcSingleLambdasForMultiplefalse

\def\lcMaximumParenthesisRangeDrawDepth#1{\def\lc@max@bracket@drawdepth{#1}}
\lcMaximumParenthesisRangeDrawDepth{0}

% hacky but this way i do not have to make anything active :3
\def\lc@enablechars{\@for\@l:={a,b,c,d,e,f,g,h,j,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z}\do{% TODO: allow optional arguments for mark for them too
   \expandafter\expandafter\expandafter\edef\expandafter\csname\@l\endcsname{\@l\noexpand\xspace}%
   \csgundef{\@l @col}% clear global colordef
}}%

\def\lc@enableshortcuts{%
\let\mathequiv\equiv
\def\equiv{\ensuremath{\mathequiv}\xspace}%
\def\Y{\mbox{\textbf{Y}}\xspace}%
}
\def\lc@init@colorcycle#1{\@tempcnta\z@\@for\@col:={#1}\do{\expandafter\expandafter\expandafter\edef\expandafter\csname lc@color@\the\@tempcnta\endcsname{\@col}\advance\@tempcnta\@ne}\edef\lc@colors@exclusivemax{\the\@tempcnta}}%

\let\lcSetColors\lc@init@colorcycle
\lcSetColors{teal,lime!90!black,red,violet,orange,pink,green,blue!75!orange,black,yellow,magenta,olive,purple,blue,brown}

% TODO: make those macros more customizable
\def\lcSetColorMixin#1{\def\lc@colormix##1{#1}}
\lcSetColorMixin{#1!85!lightgray}

\def\lcSetDuplicateVariableMixin#1{\def\lc@colormix@doublevar##1{#1}}
\lcSetDuplicateVariableMixin{#1!65!lightgray!78!black}

\tikzset{
   lc@abstraction@bracket/.style={
      lightgray!92!#1,
      opacity=.575,
      thin,
      rounded corners=2.33pt
   },
   lc@node@replacement/.style={
      draw=lightgray!55!white,
      rounded corners=3pt,
      thick,
      rectangle split,
      rectangle split part fill={lightgray!55!white,none},
      rectangle split parts=2
   },
   lc@node@replacement@inv/.style={
      lc@node@replacement,
      rectangle split part fill={none,lightgray!55!white}
   },
   lc@node@replacement@collapsed/.style={
      draw=lightgray!25!white,
      rounded corners=3pt,
      thick,
      fill={lightgray!25!white},
      font=\sffamily\itshape
   }
}

\newcommand*\lcEnableGlow[1][90]{\tikzset{lc@node/.append style={fill=\lc@colormix{##1},
rounded corners=3pt,
inner ysep=1pt,
inner xsep=2.25pt,
fill opacity=.25,
text opacity=1,text=\lc@colormix{##1}!#1!green!75!black}}}
\def\lcDisableGlow{\tikzset{lc@node/.style={
   fill=\lc@colormix{##1},
   rounded corners=3pt,
   inner ysep=1pt,
   inner xsep=2.25pt,
   fill opacity=.25,
   text opacity=1
}}}
\lcDisableGlow

\colorlet{lc@bracketcolor}{lightgray}

\def\lcSetLambda#1{\def\lc@lambdasymbol{#1}}
\lcSetLambda{\lambda}
\def\lc@strut{\rule[-\dp\z@]\z@{\dimexpr\ht\strutbox+\dp\z@}}
% color | letter | markname
\def\lc@colorvar#1#2#3{\setbox\z@=\hbox{g}\mark{#3}{\tikz[baseline=(@.base)]{\node[lc@node=#1] (@) {\lc@strut#2};}}%
\expandafter\renewcommand\csname#2\endcsname[1][lc@last]{\lc@colorvar{#1}{#2}{##1}\xspace}\def\lc@curcol{#1}%
% assign it globally so that even other groups will start from here
\expandafter\xdef\csname#2@col\endcsname{#1}%
}
\newcounter{lc@colorcycle}% switch to newcount?
% TODO: start from 0 so there is no weird shift
\def\lc@colorcycle{\ifnum\thelc@colorcycle<\lc@colors@exclusivemax\else
   \setcounter{lc@colorcycle}{0}% assume at least one
\fi
\edef\@col{\csname lc@color@\thelc@colorcycle\endcsname}\stepcounter{lc@colorcycle}}%
\def\lc@dot{\textcolor{\lc@colormix{\@col}!21!black}{.}}
% TODO color brackets/larger to match
\newcount\c@lc@bracketlevel
\newcount\c@lc@markerindex % current index for tikzmark, will not be reset!
% TODO colors brackets?
\def\lc@open{%
   % first we advance the bracketindex to ensure unique
   \stepcounter{lc@markerindex}%
   % now store the bracketindex with the current nestinglevel:
   \edef\lc@bracket@mark{\the\c@lc@markerindex}%
   % now, store the opening brace in the node
   \lc@tikzmarknode{lc@\the\c@lc@markerindex}{%
      % the opening brace
      \mbox{\color{lc@bracketcolor}(}%
      %$\underset{\mbox{\tiny\color{lightgray}\the\c@lc@bracketlevel}}{\mbox{(}}$%
   }%
   % enter the grouping level
   \begingroup\advance\c@lc@bracketlevel\@ne
}
\def\lc@close{%
   % leave grouping level
   \xdef\lc@lastbracket{\the\c@lc@bracketlevel}%
   \endgroup
   % assure unique index
   \stepcounter{lc@markerindex}%
   % store draw the brace
   \lc@tikzmarknode{lc@\the\c@lc@markerindex}{%
      % the closing brace
      \mbox{\color{lc@bracketcolor})}%
      %$\underset{\mbox{\tiny\color{lightgray}\the\c@lc@bracketlevel}}{\mbox{)}}$%
   }%
   % draw stuff around
   \lc@draw@ranges
}
\def\lc@draw@ranges{\ifnum\c@lc@bracketlevel<\lc@max@bracket@drawdepth
\tikz[overlay,remember picture]{\draw[lightgray,opacity=.42,thin,rounded corners=1pt] ([yshift=-3pt+0.75pt*\the\c@lc@bracketlevel]lc@\lc@bracket@mark.south west) rectangle ([yshift=3pt-0.75pt*\the\c@lc@bracketlevel]lc@\the\c@lc@markerindex.north east);}%
\fi
\ifcsname lc@lambdas\lc@lastbracket\endcsname
\iflcdrawlambdaranges
   \protected@edef\@tmp{\csname lc@lambdas\lc@lastbracket\endcsname}%
   \@tempcnta\z@ % level offset within same bracketlevel
   \expandafter\@tfor\expandafter\@lc@ltarget\expandafter:\expandafter=\@tmp\do{%
      % TODO allow to customize schrinking factors etc
      \edef\@lc@color{\csname lc@lambdacolor@\@lc@ltarget\endcsname}%
      % \typeout{Target: \@lc@ltarget (\@lc@color) -> \the\c@lc@markerindex}%
      \tikz[overlay,remember picture]{\draw[lc@abstraction@bracket=\@lc@color] ([yshift=-5pt+1.5pt*\the\c@lc@bracketlevel+.5pt*\the\@tempcnta]lc@\@lc@ltarget.south west) rectangle ([yshift=4pt-1.5pt*\the\c@lc@bracketlevel-.5pt*\the\@tempcnta,xshift=1pt-.5pt*\the\@tempcnta]lc@\the\c@lc@markerindex.north west);}%
      \advance\@tempcnta\@ne
   }%
\fi
% we clear, even if disabled:
\expandafter\xdef\csname lc@lambdas\lc@lastbracket\endcsname{}%
\fi}
\newcommandx*\lc@lambda[3][1={},3={}]{%
   \@tempcnta\z@
   % init empty to stay secure:
   \@for\@letter:={#2}\do{%
      \expandafter\def\csname @tmp@lc@col\the\@tempcnta\endcsname{}%
      \advance\@tempcnta\@ne
   }%
   \@tempcnta\z@
   \@for\@col:=#1\do{%
      \expandafter\edef\csname @tmp@lc@col\the\@tempcnta\endcsname{\@col}%
      \advance\@tempcnta\@ne
   }%
   \@tempcnta\z@
   \@for\@letter:={#2}\do{%
      % if nothing is selected, we use the colorcycle
      \edef\@tmp{\csname @tmp@lc@col\the\@tempcnta\endcsname}%
      \expandafter\ifstrempty\expandafter{\@tmp}{%
         % if there already is a color, lighten it
         \ifcsname\@letter @col\endcsname
            \iflcshadeSameVaiables
               \edef\@col{\lc@colormix@doublevar{\csname\@letter @col\endcsname}}%
            \else \lc@colorcycle \fi
         \else
            \lc@colorcycle
         \fi
      }{\edef\@col{\csname @tmp@lc@col\the\@tempcnta\endcsname}}% otherwise, use the picked color
      % ensure a unique index
      \stepcounter{lc@markerindex}%
      % now store the lambdaindex with the current nestinglevel:
      % by adding a hook to the nesting level of the lambda, first it is reached on a closing brace we draw
      % deal with outermost no-bracket level? => we do not draw
      \expandafter\xdef\csname lc@lambdacolor@\the\c@lc@markerindex\endcsname{\@col}%
      \expandafter\xappto\csname lc@lambdas\the\c@lc@bracketlevel\endcsname{{\the\c@lc@markerindex}}%
      % \typeout{Added \the\c@lc@markerindex. Now at: \csname lc@lambdas\the\c@lc@bracketlevel\endcsname}%
      % only draw lambda symbol if first in comfort
      \ifnum\the\@tempcnta<\@ne\else% insert the space before so brackets are better
      \iflcSingleLambdasForMultiple\lc@dot\else\phantom{\ensuremath{\lc@lambdasymbol}}\fi\fi
      \lc@tikzmarknode{lc@\the\c@lc@markerindex}{\ifnum\the\@tempcnta<\@ne
         % TODO: mixin for lambda symbol
         \ensuremath{\color{\@col!80!black}\lc@lambdasymbol}%
         \else % TODO: clean that up
         \iflcSingleLambdasForMultiple\ensuremath{\color{\@col!80!black}\lc@lambdasymbol}\fi
         \fi
      }%
      \ifstrempty{#3}{\def\lc@markname{lc@last}}{\def\lc@markname{#3}}%
      \expandafter\expandafter\expandafter\lc@colorvar\expandafter\expandafter\expandafter{\expandafter\@col\expandafter}\expandafter{\@letter}{\lc@markname}%
      \advance\@tempcnta\@ne
   }%
}%

% TODO allow to draw arrows
% TODO reductions! (first only the symbols)
\xspaceaddexceptions{\lc@close}%
\def\lc@enable@cc{%
\catcode`\(=\active \scantokens{\let(}\lc@open
\catcode`\)=\active \scantokens{\let)}\lc@close
\catcode`.=\active \scantokens{\let.}\lc@dot
}
\def\lc@enable@default{%
\let\(\lc@open
\let\)\lc@close
\let\.\lc@dot
}
\newcommandx*\lc@reducemarks[4][1=north,4={}]{\tikz[overlay,remember picture]{
   \path(#2.#1) -- (#2@.#1) coordinate[pos=.5] (@1);
   \path(#3.#1) -- (#3@.#1) coordinate[pos=.5] (@2);
   \draw[->,lightgray,bend right,#4] (@1) to (@2);
}}
\let\reducemarks\lc@reducemarks

\newcommand*\lc@mark[3][3pt]{\lc@tikzmarknode[outer ysep=#1]{#2}{\lc@strut}#3\lc@tikzmarknode[outer ysep=#1]{#2@}{\lc@strut}}%
\def\lc@tikzmarknode{\ifcsname scope\endcsname \expandafter\subnode\else \expandafter\tikzmarknode\fi}

\newif\iflc@reset@on@init@
\lc@reset@on@init@true
\def\lc@enable@base#1{%
   \let\\\lc@lambda
   \let\Rewrite\lc@TypesetRewritingRule
   \let\RewriteCollapsed\lc@TypesetRewritingRuleCollapsed
   \let\CycleColor\lc@colorcycle
   \let\lcBelowRewriteRule\lc@BelowRewriteRule
   \lc@enableshortcuts
   \let\mark\lc@mark
   % \lc@init@colorcycle % done globally
   % set to 0 even if unbalanced
   % TODO: find others to reset
   \iflc@reset@on@init@
      \lc@enablechars
      \c@lc@bracketlevel\z@
   \fi
   \setcounter{lc@colorcycle}{#1}%
}
\outer\long\def\LC{\begingroup\lc@enable@cc\@LC}

\def\lc@@LineStrut{\rule[\dimexpr-\dp\strutbox-4.5pt]\z@{\dimexpr\ht\strutbox+\dp\strutbox+9pt}}
\def\lcDoStrutLine{\let\lc@LineStrut\lc@@LineStrut}%
\def\lcDoNotStrutLine{\let\lc@LineStrut\@empty}%
\lcDoStrutLine

\def\lcMakeBox{\let\lc@mbox\mbox}%
\def\lcMakeNoBox{\let\lc@mbox\@empty}%
\lcMakeBox


\newcommand*\@LC[2][0]{\lc@mbox{\ttfamily\lc@LineStrut\lc@enable@base{#1}#2}\endgroup}
\newcommand*\RLC[2][0]{\lc@mbox{\ttfamily\lc@LineStrut\lc@enable@default\lc@enable@base{#1}#2}}


\def\lcMaximumRewritingRuleExpandDepth#1{\def\lc@max@rewriting@rule@expanddepth{#1}}
\lcMaximumRewritingRuleExpandDepth{1}

\newcount\c@lc@current@rewriteexpansiondepth

\def\lcRewriteRulesNameStrut#1{\def\lc@rewrite@name@strut{#1}}
\lcRewriteRulesNameStrut{}

% TODO: bracket/lambda range highlighter within rewrite rules (i.e. like closing brace)

% cs | name | rewrite rules
\def\lcCreateNewRewritingRule#1#2#3{\appto\lc@enableshortcuts{\def#1{\@ifstar{\lc@TypesetRewritingRuleCollapsed{#2}\xspace}{\ifnum\c@lc@current@rewriteexpansiondepth<\lc@max@rewriting@rule@expanddepth \lc@TypesetRewritingRule{#2}{#3}\else \lc@TypesetRewritingRuleCollapsed{#2}\fi\xspace}}}}

\def\lcCreateNewArgumentRewritingRule#1#2#3{\appto\lc@enableshortcuts{\def#1{\@ifstar{\def\lc@second{#2}\lc@TypesetArgumentRewritingRuleCollapsed}{\def\lc@second{#2}\def\lc@third{#3}\lc@TypesetArgumentRewritingRule}}}}

\def\lc@TypesetArgumentRewritingRuleCollapsed#1{\def\@arg{#1}\lc@TypesetRewritingRuleCollapsed{\lc@second}\xspace}
\def\lc@TypesetArgumentRewritingRule#1{\def\@arg{#1}\ifnum\c@lc@current@rewriteexpansiondepth<\lc@max@rewriting@rule@expanddepth  \lc@TypesetRewritingRule{\lc@second}{\lc@third}\else \lc@TypesetRewritingRuleCollapsed{\lc@second}\fi\xspace}

% TODO: lambda vis intent resets within nestings
\usetikzlibrary{shapes.multipart}
\def\lc@rewrite@inner@strut{\rule[\dimexpr-\dp0-\lc@rewrite@inner@strut@lower]{0pt}{\dimexpr\dp0+\ht0+\lc@rewrite@inner@strut@upper+\lc@rewrite@inner@strut@lower}}
% upper | lower
\def\lcUpdateInnerStrut#1#2{\def\lc@rewrite@inner@strut@upper{#1}\def\lc@rewrite@inner@strut@lower{#2}}
\lcUpdateInnerStrut{2pt}{2pt}

\def\lc@TypesetRewritingRule#1#2{\global\advance\c@lc@current@rewriteexpansiondepth\@ne\setbox0=\hbox{\lc@reset@on@init@false\advance\c@lc@bracketlevel\@ne\RLC[\the\c@lc@colorcycle]{#2}\stepcounter{lc@markerindex}\lc@tikzmarknode{lc@\the\c@lc@markerindex}{\lc@strut}\ifcsname lc@lastbracket\endcsname\expandafter\xdef\csname lc@lambdas\lc@lastbracket\endcsname{}\fi}\tikz[baseline=(@.two)]{\node[lc@node@replacement,inner ysep=1pt] (@) {\scriptsize\lc@rewrite@name@strut#1\nodepart{two}\lc@rewrite@inner@strut\box0};}\global\advance\c@lc@current@rewriteexpansiondepth\m@ne}

\def\lc@BelowRewriteRule#1#2{\global\advance\c@lc@current@rewriteexpansiondepth\@ne\setbox0=\hbox{\lc@reset@on@init@false\advance\c@lc@bracketlevel\@ne\RLC[\the\c@lc@colorcycle]{#2}\stepcounter{lc@markerindex}\lc@tikzmarknode{lc@\the\c@lc@markerindex}{\lc@strut}\ifcsname lc@lastbracket\endcsname\expandafter\xdef\csname lc@lambdas\lc@lastbracket\endcsname{}\fi}\tikz[baseline=(@.base)]{\node[lc@node@replacement@inv,inner ysep=1pt] (@) {\lc@rewrite@inner@strut\box0\nodepart{two}\scriptsize\lc@rewrite@name@strut#1};}\global\advance\c@lc@current@rewriteexpansiondepth\m@ne}

\def\lc@TypesetRewritingRuleCollapsed#1{\tikz[baseline=(@.base)]{\node[lc@node@replacement@collapsed] (@) {\lc@rewrite@name@strut#1};}}

\iflc@load@default@rewrites
\lcCreateNewRewritingRule\true{true}{\\{x,y}\.\x}%
\lcCreateNewRewritingRule\false{false}{\\{x,y}\.\y}%
\lcCreateNewRewritingRule\ifelse{ifelse}{\\{p,a,b}\.\p \a \b}%
% TODO: allow aliasses for rewrite rules (ite for ifelse)

% TODO: find a way so they do not disturb tikz
\lcCreateNewRewritingRule\Land{and}{\\{p,q}\.\p \q \p}%
\lcCreateNewRewritingRule\Lor{or}{\\{p,q}\.\p \p \q}%
\lcCreateNewRewritingRule\Lnot{not}{\\{p,a,b}\.\p \b \a}%

% TODO: simple variant that uses the name for the command sequence as well?
\lcCreateNewRewritingRule\cons{cons}{\\{x,y,c}\.\c \x \y}%
\lcCreateNewRewritingRule\head{head}{\\{d}\.\d \true}%
\lcCreateNewRewritingRule\tail{tail}{\\{d}\.\d \false}%
\lcCreateNewRewritingRule\nil{nil}{\\x\.\true}%
% TODO: find a way so they do not disturb latex
\lcCreateNewRewritingRule\Lnull{null}{\\d\.\d \(\\{x,y}\.\false\)}%

\def\lc@construct@number#1{\ifnum#1=0 \x\else\f \ifnum#1>1 \(\fi\expandafter\lc@construct@number\expandafter{\the\numexpr#1-1}\ifnum#1>1 \)\fi\fi}
\lcCreateNewArgumentRewritingRule\num{\@arg}{\\{f,x}\.\lc@construct@number{\@arg}}

\lcCreateNewRewritingRule\pair{pair}{\\{a,b,f}\.\f \a \b}%

\lcCreateNewRewritingRule\succ{succ}{\\{n,f,x}\.\f \(\n \f \x\)}%
\lcCreateNewRewritingRule\add{add}{\\{m,n,f,x}\.\m \f \(\n \f \x\)}%
\lcCreateNewRewritingRule\mult{mult}{\\{n,m,f}\.\m \(\n \f\)}%
% TODO: option to only expand until level X so that it does not automatically expand within isZero...
% TODO: beamer animation support
\lcCreateNewRewritingRule\isZero{isZero}{\\n\.\n \(\\y\.\false\) \true}%
\lcCreateNewRewritingRule\pred{pred}{\\{n,f,x}\.\n \(\\{g,h}\.\h \(\g \f\)\) \(\\u.\x\) \(\\u.\u\)}%

\lcCreateNewRewritingRule\Ycomb{\textbf{Y}}{\\f\.\(\\x\.\f \(\x \x\)\) \(\\x\.\f \(\x \x\)\)}%
\fi

% TODO: lualatex allow lambda unicode symbol
% TODO: allow to insert unicode breaks
\endinput